{"version":3,"sources":["Key.js","Letter.js","Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Key","letter","value","feedback","onClick","onTouchStart","className","Letter","Counter","counter","status","words","App","getFeedback","bind","newGame","testLetter","getStatus","state","keyboard","getKeyboard","word","getWord","response","bgColor","display","btnText","toUpperCase","split","index","Math","floor","random","length","e","this","letterToTest","currentTarget","key","setState","includes","previousState","filter","elt","goodResponse","join","window","removeEventListener","addEventListener","help","style","backgroundColor","map","i","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b31b6e6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Key({letter, value, feedback, onClick, onTouchStart}) {\n    return (\n        <button\n            className={`keyboard-letter ${feedback\n            ? 'key'\n            : 'key-right'}`}\n            value={value}\n            onClick={onClick}\n            onTouchStart={onTouchStart}>\n            <p className='text'>{letter}</p>\n        </button>\n    )\n\n}\n\nexport default Key","import React from 'react';\n\nfunction Letter({letter, feedback}) {\n    return (\n        <div className=\"word-letter\">\n            <p className={feedback\n                ? 'hidden'\n                : 'visible'}>{letter}</p>\n        </div>\n    )\n}\n\nexport default Letter","import React from 'react'\n\nfunction Counter({counter, status})  {\n    return (\n        <div className=\"box\">{counter} coups restant\n    </div>\n    )\n}\n\nexport default Counter","import React from 'react'\nimport './App.css';\nimport Key from './Key'\nimport Letter from './Letter'\nimport Counter from './Counter'\n\nconst azerty = \"azertyuiopqsdfghjklmwxcvbn\"\nconst words = [\"Natachat\", \"Jade\", \"Thomas\", \"Rari\", \"Rarette\"]\n\nclass App extends React.Component {\n    constructor() {\n        super()\n\n        this.getFeedback = this\n            .getFeedback\n            .bind(this)\n\n        this.newGame = this\n            .newGame\n            .bind(this)\n\n        this.testLetter = this\n            .testLetter\n            .bind(this)\n\n        this.getStatus = this\n            .getStatus\n            .bind(this)\n\n        this.state = {\n            keyboard: this.getKeyboard(),\n            word: this.getWord(),\n            response: [],\n            counter: 8,\n            status: 'Jeu du pendu',\n            bgColor: '#111111',\n            display: 'flex',\n            btnText: 'Commencer'\n        }\n    }\n\n    getKeyboard() {\n        return azerty\n            .toUpperCase()\n            .split('')\n    }\n\n    getWord() {\n        const index = Math.floor(Math.random() * words.length)\n        return words[index]\n            .toUpperCase()\n            .split('')\n    }\n\n    testLetter(e) {\n        const {response, word} = this.state;\n        const letterToTest = e.currentTarget.value || e\n            .key\n            .toUpperCase();\n\n        this.setState({\n            response: [\n                ...response,\n                letterToTest\n            ]\n        }, this.getStatus)\n\n        word.includes(letterToTest)\n            ? this.setState((previousState) => ({counter: previousState.counter}))\n            : this.setState((previousState) => ({\n                counter: previousState.counter - 1\n            }))\n    }\n\n    newGame() {\n        this.setState({\n            word: this.getWord(),\n            response: [],\n            counter: 8,\n            status: 'en cours',\n            display: 'none'\n        })\n    }\n\n    getFeedback(letter) {\n        const {response, word} = this.state;\n        const goodResponse = word.filter(elt => response.includes(elt))\n        if (goodResponse.includes(letter)) {\n            return false\n        }\n        return true\n    }\n\n    getStatus() {\n        const {response, word, counter} = this.state;\n        const goodResponse = word.filter(elt => response.includes(elt))\n\n        counter > 1\n            ? goodResponse.join('') === word.join('')\n                ? this.setState({status: 'You Win', bgColor: 'green', display: 'flex'})\n                : this.setState({status: 'en cours', bgColor: 'grey'})\n            : this.setState({status: 'You lose', bgColor: 'red', display: 'flex'})\n    }\n\n    componentDidUpdate() {\n        if (this.state.display === 'flex') {\n            window.removeEventListener('keypress', this.testLetter)\n        } else {\n            window.addEventListener('keypress', this.testLetter)\n        }\n    }\n\n    render() {\n\n        const {word, counter, status, bgColor, display, btnText} = this.state\n\n        const help = <p>The word was {word}</p>\n\n        return (\n            <div className=\"App\">\n                <div\n                    className=\"intro\"\n                    style={{\n                    backgroundColor: `${bgColor}`,\n                    display: `${display}`\n                }}>\n                    <h1>{status}</h1>\n                    {help}\n                    <button className=\"reset\" onClick={this.newGame}>{btnText}</button>\n                </div>\n                <div className=\"statebox\">\n                    <Counter counter={counter} status={status}/>\n                    <button className=\"reset\" onClick={this.newGame}>Nouvelle Partie</button>\n                </div>\n\n                <div className='word'>\n                    {word.map((letter, i) => <Letter key={i} letter={letter} feedback={this.getFeedback(letter)}/>)}\n                </div>\n                <div className='keyboard'>\n                    {this\n                        .state\n                        .keyboard\n                        .map((letter, i) => <Key\n                            key={i}\n                            value={letter}\n                            letter={letter}\n                            feedback={this.getFeedback(letter)}\n                            onClick={this.testLetter}\n                            onTouchStart={this.testLetter}/>)}\n                </div>\n            </div>\n        )\n\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}